// Generated by CoffeeScript 1.8.0
var DetailEditor, detailEditor;

DetailEditor = (function() {
  function DetailEditor() {}

  DetailEditor.prototype.AddImageLoadEvent = function(canvas) {
    var handleImage, imageLoader;
    handleImage = function(e) {
      var reader;
      reader = new FileReader();
      reader.onload = function(event) {
        var img;
        img = new Image();
        img.src = event.target.result;
        return img.onload = function() {
          var image;
          image = new fabric.Image(img);
          image.set({
            angle: 0,
            padding: 10,
            cornersize: 10,
            selectable: false
          });
          if (image.width > 100) {
            image.width = 100;
          }
          if (image.height > 100) {
            image.height = 100;
          }
          if (image.type === void 0) {
            image.type = "image";
          }
          if (canvas.lastObject !== void 0) {
            canvas.remove(canvas.lastObject);
          }
          image.setCoords(0, 0);
          canvas.add(image);
          canvas.centerObject(image);
          canvas.renderAll();
          return canvas.lastObject = image;
        };
      };
      return reader.readAsDataURL(e.target.files[0]);
    };
    imageLoader = document.getElementById("uploadImgBtn");
    return imageLoader.addEventListener("change", handleImage, false);
  };

  DetailEditor.prototype.AddProperty = function() {
    var flag, i, propName, propValue, _i, _ref;
    propName = document.getElementById('propertyName').value;
    propValue = document.getElementById('propertyValue').value;
    if (this.canvas.lastObject !== void 0) {
      if (this.canvas.propertyName === void 0) {
        this.canvas.propertyName = new Array();
        this.canvas.propertyValue = new Array();
      }
    }
    flag = false;
    for (i = _i = 0, _ref = this.canvas.propertyName.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.canvas.propertyName === propName) {
        flag = true;
      }
    }
    if (flag === false) {
      this.canvas.propertyName.push(propName);
      this.canvas.propertyValue.push(propValue);
    }
    return detailEditor.DisplayProperties();
  };

  DetailEditor.prototype.DisplayProperties = function() {
    var i, text, _i, _ref;
    this.propCanvas = new fabric.Canvas('propertyDisplay', {
      selection: false
    });
    for (i = _i = 0, _ref = this.canvas.propertyName.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      text = new fabric.Text(this.canvas.propertyName[i] + ": " + this.canvas.propertyValue[i], {
        selectable: false,
        fontSize: 15,
        fontFamily: 'Ubuntu'
      });
      this.propCanvas.add(text);
    }
    return this.propCanvas.renderAll();
  };

  DetailEditor.prototype.Init = function() {
    var ctx;
    this.canvas = new fabric.Canvas('detailLoad', {
      selection: false
    });
    this.AddImageLoadEvent(this.canvas);
    return ctx = this.canvas.getContext("2d");
  };

  return DetailEditor;

})();

detailEditor = new DetailEditor();
