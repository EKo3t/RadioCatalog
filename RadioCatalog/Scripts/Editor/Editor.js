// Generated by CoffeeScript 1.8.0
var Editor, editor;

Editor = (function() {
  function Editor() {}

  Editor.prototype.addImageLoadEvent = function(canvas) {
    var ctx, handleImage, imageLoader;
    handleImage = function(e) {
      var reader;
      reader = new FileReader();
      reader.onload = function(event) {
        var img;
        img = new Image();
        img.src = event.target.result;
        return img.onload = function() {
          var image;
          image = new fabric.Image(img);
          image.set({
            angle: 0,
            padding: 10,
            cornersize: 10
          });
          canvas.centerObject(image);
          canvas.add(image);
          return canvas.renderAll();
        };
      };
      return reader.readAsDataURL(e.target.files[0]);
    };
    imageLoader = document.getElementById("uploadImg");
    imageLoader.addEventListener("change", handleImage, false);
    return ctx = canvas.getContext("2d");
  };

  Editor.prototype.addWireDrawing = function() {
    return editor.wireDrawing = true;
  };

  Editor.prototype.makeLine = function(coords) {
    return new fabric.Line(coords, {
      fill: 'black',
      stroke: 'black',
      strokeWidth: 2,
      selectable: false
    });
  };

  Editor.prototype.addBinding = function() {
    return editor.binding = true;
  };

  Editor.prototype.addObjBinding = function(obj1, obj2) {
    var element, flag, _i, _len, _ref;
    if (obj1.bindCount === void 0) {
      obj1.bindCount = 1;
    }
    if (obj1.bindedObj === void 0) {
      obj1.bindedObj = new fabric.group(obj2);
    }
    if (obj1.bindedObj !== void 0) {
      flag = false;
      _ref = obj1.bindedObj;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        if (element === obj2) {
          flag = true;
        }
      }
      if (flag === false) {
        return obj1.bindedObj.add(obj2);
      }
    }
  };

  Editor.prototype.createLines = function() {};

  Editor.prototype.init = function() {
    var canvas;
    canvas = new fabric.Canvas('editor', {
      selection: false
    });
    canvas.width = $(window).width();
    canvas.height = $(window).height();
    canvas.forEachObject(function(obj) {
      var element, _i, _len, _ref, _results;
      obj.on('selected', function() {
        if (editor.binding === true) {
          if (editor.groupObj === void 0) {
            editor.groupObj = new fabric.group(obj);
          }
          if (editor.groupObj.count === 2) {
            return addObjBinding(editor.groupObj[0], editor.groupObj[1]);
          }
        }
      });
      _ref = obj1.bindedObj;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(this.createLines());
      }
      return _results;
    });
    return this.addImageLoadEvent(canvas);
  };

  return Editor;

})();

editor = new Editor();
